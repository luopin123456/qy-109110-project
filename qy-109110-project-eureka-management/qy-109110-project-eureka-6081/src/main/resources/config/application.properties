server.port=6061
server.servlet.context-path=/

# eureka保证了AP性，所以这个组件比较智障(eureka如何不去配置，则默认也会向自己去注册自己)(这个和eureka的特性有关)
# 目前使用单节点版(配置eureka忽略向自己注册自己)
# 意思就是不再向eureka去注册自己
eureka.client.register-with-eureka=false
# eureka已经不再向自己注册自己了，但是默认还是会自动服务发现自己
# 配置不再进行服务发现
eureka.client.fetch-registry=false

# eureka的核心配置
# 单机版
# 需要进行配置eureka的域名/ip(因为无论是服务的注册和服务的发现都必须要知道eureka的ip/域名地址，所以需要提前把ip和域名声明出来供其他服务使用)
# 先声明出域名/ip，让服务知道eureka具体在哪一台服务器上做的部署
eureka.instance.hostname=eureka01

# 配置eureka的注册中心地址
# 关于service-url.后面的内容是命名空间
# 因为在eureka中不可能只有一个provider，有可能有非常多的provider的
# order生产者--->order provider
# cart生产者--->cart provider
# user生产者--->user provider
# 如果eureka有100个provider注册进来了
# user消费者--->user consumer ---> 先找到eureka去查看 ---> 其实最终也可以找到，但是花费的时间就比较长
# 不如给所有生产者分配命名空间，当去寻找的时候，只需要去寻找命名空间即可！！！！
# 默认值官方提供的是defaultZone
# 比如provider所注册进来的空间叫做defaultZone
# 但是你用一个secondZone的一个consumer去发现则发现不了
eureka.client.service-url.defaultZone=http://eureka02:6062/eureka,http://eureka03:6063/eureka

# 关闭eureka的自我保护机制
# eureka.server.enable-self-preservation=false

# 失效eureka的自我保护机制(单位是毫秒)
# 如果长时间不访问eureka，仍然会显示那一行自我保护机制的提示，但是已经失效了
eureka.server.eviction-interval-timer-in-ms=7000